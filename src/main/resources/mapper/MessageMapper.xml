<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.MessageMapper">

    <sql id="selectFields">
        id, from_id as fromId, to_id as toId, conversation_id as conversationId, content, status, create_time as createTime
    </sql>


    <!--查询当前用户会话的列表，针对每个会话只返回最新私信-->
    <!--需要利用子查询，查询到每个会话最新的消息，并将其降序排列并支持分页-->
    <select id="selectConversations" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id) from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>
    <!--查询当前用户的会话数量-->
    <select id="selectConversationsCount" resultType="int">
        select count(m.max_id) from
            (select max(id) as max_id
            from message
            where status!=2
            and from_id !=1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id)
        as m
    </select>

    <!--查询某个会话的私信列表-->
    <select id="selectLetters" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id=#{conversationId}
        and status!=2
        and from_id!=1
        order by id desc
        limit #{offset}, #{limit}
    </select>

    <!--查询某个会话私信数量-->
    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where conversation_id=#{conversationId}
        and status!=2
        and from_id!=1
    </select>

    <!--查询未读消息数量(包括当前用户的所有未读消息或会话的未读消息)-->
    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status=0
        and from_id!=1
        and to_id=#{userId}
        <if test="conversationId != null">
            and conversation_id=#{conversationId}
        </if>
    </select>


    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(from_id, to_id, conversation_id, content, status, create_time)
        values(#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <update id="updateStatus">
        update message
        set status=#{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>
